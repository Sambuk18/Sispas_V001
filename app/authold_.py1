from flask import Blueprint, render_template, redirect, url_for, flash, request
from flask_login import login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from app import db
from app.models import User
from app.forms import LoginForm, RegistrationForm
from app.utils import send_confirmation_email


auth_bp = Blueprint('auth_bp', __name__)

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))
    
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and user.check_password(form.password.data):
            login_user(user, remember=form.remember.data)
            return redirect(url_for('main.dashboard'))
        flash('Email o contraseña incorrectos', 'danger')
    return render_template('auth/login.html', form=form)

@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Has cerrado sesión correctamente', 'success')
    return redirect(url_for('auth.login'))

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated and not current_user.is_admin:
        return redirect(url_for('main.dashboard'))
    
    form = RegistrationForm()
    if form.validate_on_submit():
        existing_user = User.query.filter(
            (User.email == form.email.data) | (User.username == form.username.data)
        ).first()
        
        if existing_user:
            flash('El email o nombre de usuario ya está registrado', 'danger')
            return redirect(url_for('auth.register'))
        
        user = User(
            username=form.username.data,
            email=form.email.data,
            password_hash=generate_password_hash(form.password.data),
            role='user' if not current_user.is_admin else form.role.data,
            is_active=True if current_user.is_admin else False
        )
        
        db.session.add(user)
        db.session.commit()
        
        if current_user.is_admin:
            flash('Usuario registrado exitosamente', 'success')
            return redirect(url_for('admin.user_list'))
        else:
            send_confirmation_email(user)
            flash('Registro exitoso. Un administrador activará tu cuenta pronto.', 'success')
            return redirect(url_for('auth.login'))
    
    return render_template('auth/register.html', form=form)

@auth_bp.route('/confirm/<token>')
def confirm_email(token):
    user = User.verify_confirmation_token(token)
    if not user:
        flash('El enlace de confirmación es inválido o ha expirado', 'danger')
        return redirect(url_for('auth.login'))
    
    user.is_active = True
    db.session.commit()
    flash('Cuenta confirmada exitosamente. Ya puedes iniciar sesión.', 'success')
    return redirect(url_for('auth.login'))